   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 declList FUNC funcList

   3  declList : declList decl
   4           |

   5  funcList : funcList func
   6           |

   7  $$2 :

   8  decl : type $$2 TArray Lid ';'
   9       | declStruct

  10  declStruct : STRUCT IDENT '{' listaCampos '}' ';'

  11  listaCampos : listaCampos decl
  12              |

  13  func : typeRet Fid '(' listaParam ')' '{' listacmd retorno ';' '}'
  14       | main
  15       | IDENTNULL '(' ')'

  16  Fid : IDENT

  17  typeRet : type
  18          | VOID

  19  listaParam : listaParam ',' param
  20             | param

  21  param : type id

  22  retorno : RETURN IDENTNULL

  23  IDENTNULL : IDENT

  24  TArray : '[' NUM ']' TArray
  25         |

  26  Lid : Lid ',' id
  27      | id

  28  id : IDENT

  29  type : INT
  30       | DOUBLE
  31       | BOOL
  32       | IDENT

  33  main : VOID MAIN '(' ')' bloco

  34  bloco : '{' listacmd '}'

  35  listacmd : listacmd cmd
  36           |

  37  cmd : IDENT '=' exp ';'

  38  $$3 :

  39  cmd : IF '(' exp ')' $$3 cmd

  40  exp : exp '+' exp
  41      | exp '*' exp
  42      | exp '>' exp
  43      | exp AND exp
  44      | NUM
  45      | '(' exp ')'
  46      | IDENT
  47      | IDENT '(' ')' ';'
  48      | IDENT '(' listaExp ')' ';'
  49      | exp '.' exp
  50      | exp '[' exp ']'

  51  listaExp : listaExp ',' exp
  52           | exp

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . declList FUNC funcList  (2)
	declList : .  (4)

	.  reduce 4

	declList  goto 3


state 3
	prog : $$1 declList . FUNC funcList  (2)
	declList : declList . decl  (3)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	STRUCT  shift 8
	FUNC  shift 9
	.  error

	type  goto 10
	decl  goto 11
	declStruct  goto 12


state 4
	type : IDENT .  (32)

	.  reduce 32


state 5
	type : INT .  (29)

	.  reduce 29


state 6
	type : DOUBLE .  (30)

	.  reduce 30


state 7
	type : BOOL .  (31)

	.  reduce 31


state 8
	declStruct : STRUCT . IDENT '{' listaCampos '}' ';'  (10)

	IDENT  shift 13
	.  error


state 9
	prog : $$1 declList FUNC . funcList  (2)
	funcList : .  (6)

	.  reduce 6

	funcList  goto 14


state 10
	decl : type . $$2 TArray Lid ';'  (8)
	$$2 : .  (7)

	.  reduce 7

	$$2  goto 15


state 11
	declList : declList decl .  (3)

	.  reduce 3


state 12
	decl : declStruct .  (9)

	.  reduce 9


state 13
	declStruct : STRUCT IDENT . '{' listaCampos '}' ';'  (10)

	'{'  shift 16
	.  error


state 14
	prog : $$1 declList FUNC funcList .  (2)
	funcList : funcList . func  (5)

	IDENT  shift 17
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	VOID  shift 18
	$end  reduce 2

	type  goto 19
	func  goto 20
	typeRet  goto 21
	main  goto 22
	IDENTNULL  goto 23


state 15
	decl : type $$2 . TArray Lid ';'  (8)
	TArray : .  (25)

	'['  shift 24
	IDENT  reduce 25

	TArray  goto 25


state 16
	declStruct : STRUCT IDENT '{' . listaCampos '}' ';'  (10)
	listaCampos : .  (12)

	.  reduce 12

	listaCampos  goto 26


state 17
	IDENTNULL : IDENT .  (23)
	type : IDENT .  (32)

	IDENT  reduce 32
	'('  reduce 23


state 18
	typeRet : VOID .  (18)
	main : VOID . MAIN '(' ')' bloco  (33)

	MAIN  shift 27
	IDENT  reduce 18


state 19
	typeRet : type .  (17)

	.  reduce 17


state 20
	funcList : funcList func .  (5)

	.  reduce 5


state 21
	func : typeRet . Fid '(' listaParam ')' '{' listacmd retorno ';' '}'  (13)

	IDENT  shift 28
	.  error

	Fid  goto 29


state 22
	func : main .  (14)

	.  reduce 14


state 23
	func : IDENTNULL . '(' ')'  (15)

	'('  shift 30
	.  error


state 24
	TArray : '[' . NUM ']' TArray  (24)

	NUM  shift 31
	.  error


state 25
	decl : type $$2 TArray . Lid ';'  (8)

	IDENT  shift 32
	.  error

	Lid  goto 33
	id  goto 34


state 26
	declStruct : STRUCT IDENT '{' listaCampos . '}' ';'  (10)
	listaCampos : listaCampos . decl  (11)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	STRUCT  shift 8
	'}'  shift 35
	.  error

	type  goto 10
	decl  goto 36
	declStruct  goto 12


state 27
	main : VOID MAIN . '(' ')' bloco  (33)

	'('  shift 37
	.  error


state 28
	Fid : IDENT .  (16)

	.  reduce 16


state 29
	func : typeRet Fid . '(' listaParam ')' '{' listacmd retorno ';' '}'  (13)

	'('  shift 38
	.  error


state 30
	func : IDENTNULL '(' . ')'  (15)

	')'  shift 39
	.  error


state 31
	TArray : '[' NUM . ']' TArray  (24)

	']'  shift 40
	.  error


state 32
	id : IDENT .  (28)

	.  reduce 28


state 33
	decl : type $$2 TArray Lid . ';'  (8)
	Lid : Lid . ',' id  (26)

	';'  shift 41
	','  shift 42
	.  error


state 34
	Lid : id .  (27)

	.  reduce 27


state 35
	declStruct : STRUCT IDENT '{' listaCampos '}' . ';'  (10)

	';'  shift 43
	.  error


state 36
	listaCampos : listaCampos decl .  (11)

	.  reduce 11


state 37
	main : VOID MAIN '(' . ')' bloco  (33)

	')'  shift 44
	.  error


state 38
	func : typeRet Fid '(' . listaParam ')' '{' listacmd retorno ';' '}'  (13)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	.  error

	type  goto 45
	listaParam  goto 46
	param  goto 47


state 39
	func : IDENTNULL '(' ')' .  (15)

	.  reduce 15


state 40
	TArray : '[' NUM ']' . TArray  (24)
	TArray : .  (25)

	'['  shift 24
	IDENT  reduce 25

	TArray  goto 48


state 41
	decl : type $$2 TArray Lid ';' .  (8)

	.  reduce 8


state 42
	Lid : Lid ',' . id  (26)

	IDENT  shift 32
	.  error

	id  goto 49


state 43
	declStruct : STRUCT IDENT '{' listaCampos '}' ';' .  (10)

	.  reduce 10


state 44
	main : VOID MAIN '(' ')' . bloco  (33)

	'{'  shift 50
	.  error

	bloco  goto 51


state 45
	param : type . id  (21)

	IDENT  shift 32
	.  error

	id  goto 52


state 46
	func : typeRet Fid '(' listaParam . ')' '{' listacmd retorno ';' '}'  (13)
	listaParam : listaParam . ',' param  (19)

	')'  shift 53
	','  shift 54
	.  error


state 47
	listaParam : param .  (20)

	.  reduce 20


state 48
	TArray : '[' NUM ']' TArray .  (24)

	.  reduce 24


state 49
	Lid : Lid ',' id .  (26)

	.  reduce 26


state 50
	bloco : '{' . listacmd '}'  (34)
	listacmd : .  (36)

	.  reduce 36

	listacmd  goto 55


state 51
	main : VOID MAIN '(' ')' bloco .  (33)

	.  reduce 33


state 52
	param : type id .  (21)

	.  reduce 21


state 53
	func : typeRet Fid '(' listaParam ')' . '{' listacmd retorno ';' '}'  (13)

	'{'  shift 56
	.  error


state 54
	listaParam : listaParam ',' . param  (19)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	.  error

	type  goto 45
	param  goto 57


state 55
	bloco : '{' listacmd . '}'  (34)
	listacmd : listacmd . cmd  (35)

	IDENT  shift 58
	IF  shift 59
	'}'  shift 60
	.  error

	cmd  goto 61


state 56
	func : typeRet Fid '(' listaParam ')' '{' . listacmd retorno ';' '}'  (13)
	listacmd : .  (36)

	.  reduce 36

	listacmd  goto 62


state 57
	listaParam : listaParam ',' param .  (19)

	.  reduce 19


state 58
	cmd : IDENT . '=' exp ';'  (37)

	'='  shift 63
	.  error


state 59
	cmd : IF . '(' exp ')' $$3 cmd  (39)

	'('  shift 64
	.  error


state 60
	bloco : '{' listacmd '}' .  (34)

	.  reduce 34


state 61
	listacmd : listacmd cmd .  (35)

	.  reduce 35


state 62
	func : typeRet Fid '(' listaParam ')' '{' listacmd . retorno ';' '}'  (13)
	listacmd : listacmd . cmd  (35)

	IDENT  shift 58
	IF  shift 59
	RETURN  shift 65
	.  error

	retorno  goto 66
	cmd  goto 61


state 63
	cmd : IDENT '=' . exp ';'  (37)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 70


state 64
	cmd : IF '(' . exp ')' $$3 cmd  (39)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 71


state 65
	retorno : RETURN . IDENTNULL  (22)

	IDENT  shift 72
	.  error

	IDENTNULL  goto 73


state 66
	func : typeRet Fid '(' listaParam ')' '{' listacmd retorno . ';' '}'  (13)

	';'  shift 74
	.  error


state 67
	exp : IDENT .  (46)
	exp : IDENT . '(' ')' ';'  (47)
	exp : IDENT . '(' listaExp ')' ';'  (48)

	'('  shift 75
	AND  reduce 46
	'>'  reduce 46
	'+'  reduce 46
	'*'  reduce 46
	'['  reduce 46
	'.'  reduce 46
	';'  reduce 46
	')'  reduce 46
	','  reduce 46
	']'  reduce 46


state 68
	exp : NUM .  (44)

	.  reduce 44


state 69
	exp : '(' . exp ')'  (45)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 76


state 70
	cmd : IDENT '=' exp . ';'  (37)
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	AND  shift 77
	'>'  shift 78
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	';'  shift 83
	.  error


state 71
	cmd : IF '(' exp . ')' $$3 cmd  (39)
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	AND  shift 77
	'>'  shift 78
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	')'  shift 84
	.  error


state 72
	IDENTNULL : IDENT .  (23)

	.  reduce 23


state 73
	retorno : RETURN IDENTNULL .  (22)

	.  reduce 22


state 74
	func : typeRet Fid '(' listaParam ')' '{' listacmd retorno ';' . '}'  (13)

	'}'  shift 85
	.  error


state 75
	exp : IDENT '(' . ')' ';'  (47)
	exp : IDENT '(' . listaExp ')' ';'  (48)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	')'  shift 86
	.  error

	exp  goto 87
	listaExp  goto 88


state 76
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : '(' exp . ')'  (45)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	AND  shift 77
	'>'  shift 78
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	')'  shift 89
	.  error


state 77
	exp : exp AND . exp  (43)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 90


state 78
	exp : exp '>' . exp  (42)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 91


state 79
	exp : exp '+' . exp  (40)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 92


state 80
	exp : exp '*' . exp  (41)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 93


state 81
	exp : exp '[' . exp ']'  (50)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 94


state 82
	exp : exp '.' . exp  (49)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 95


state 83
	cmd : IDENT '=' exp ';' .  (37)

	.  reduce 37


state 84
	cmd : IF '(' exp ')' . $$3 cmd  (39)
	$$3 : .  (38)

	.  reduce 38

	$$3  goto 96


state 85
	func : typeRet Fid '(' listaParam ')' '{' listacmd retorno ';' '}' .  (13)

	.  reduce 13


state 86
	exp : IDENT '(' ')' . ';'  (47)

	';'  shift 97
	.  error


state 87
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)
	listaExp : exp .  (52)

	AND  shift 77
	'>'  shift 78
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	')'  reduce 52
	','  reduce 52


state 88
	exp : IDENT '(' listaExp . ')' ';'  (48)
	listaExp : listaExp . ',' exp  (51)

	')'  shift 98
	','  shift 99
	.  error


state 89
	exp : '(' exp ')' .  (45)

	.  reduce 45


state 90
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp AND exp .  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	AND  reduce 43
	'>'  reduce 43
	';'  reduce 43
	')'  reduce 43
	','  reduce 43
	']'  reduce 43


state 91
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp '>' exp .  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	AND  shift 77
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	';'  reduce 42
	')'  reduce 42
	','  reduce 42
	']'  reduce 42


state 92
	exp : exp . '+' exp  (40)
	exp : exp '+' exp .  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	AND  reduce 40
	'>'  reduce 40
	'+'  reduce 40
	';'  reduce 40
	')'  reduce 40
	','  reduce 40
	']'  reduce 40


state 93
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp '*' exp .  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)

	'['  shift 81
	'.'  shift 82
	AND  reduce 41
	'>'  reduce 41
	'+'  reduce 41
	'*'  reduce 41
	';'  reduce 41
	')'  reduce 41
	','  reduce 41
	']'  reduce 41


state 94
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)
	exp : exp '[' exp . ']'  (50)

	AND  shift 77
	'>'  shift 78
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	']'  shift 100
	.  error


state 95
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp '.' exp .  (49)
	exp : exp . '[' exp ']'  (50)

	.  reduce 49


state 96
	cmd : IF '(' exp ')' $$3 . cmd  (39)

	IDENT  shift 58
	IF  shift 59
	.  error

	cmd  goto 101


state 97
	exp : IDENT '(' ')' ';' .  (47)

	.  reduce 47


state 98
	exp : IDENT '(' listaExp ')' . ';'  (48)

	';'  shift 102
	.  error


state 99
	listaExp : listaExp ',' . exp  (51)

	IDENT  shift 67
	NUM  shift 68
	'('  shift 69
	.  error

	exp  goto 103


state 100
	exp : exp '[' exp ']' .  (50)

	.  reduce 50


state 101
	cmd : IF '(' exp ')' $$3 cmd .  (39)

	.  reduce 39


state 102
	exp : IDENT '(' listaExp ')' ';' .  (48)

	.  reduce 48


state 103
	exp : exp . '+' exp  (40)
	exp : exp . '*' exp  (41)
	exp : exp . '>' exp  (42)
	exp : exp . AND exp  (43)
	exp : exp . '.' exp  (49)
	exp : exp . '[' exp ']'  (50)
	listaExp : listaExp ',' exp .  (51)

	AND  shift 77
	'>'  shift 78
	'+'  shift 79
	'*'  shift 80
	'['  shift 81
	'.'  shift 82
	')'  reduce 51
	','  reduce 51


29 terminals, 27 nonterminals
53 grammar rules, 104 states
